<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 配置扫描包主要为了把Service扫描到IOC容器中 -->
	<context:component-scan base-package="com.atguigu.crowd.service"></context:component-scan>
	<!-- 配置事务管理器 -->
	<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 装配数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置事务切面 -->
	<aop:config>
		<!-- 考虑到后面我们整合SpringSecurity,避免把UserDetailService加入到事务控制,让切入点定位到ServiceImpl -->
		<aop:pointcut expression="execution(* *..*ServiceImpl.*(..)) " id="txPointcut"/>
		<!-- 将切入点表达式和事务关联起来 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	
	</aop:config>
	
	<!-- 配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
		<!-- 配置事务属性 -->
		<tx:attributes>
			<!-- 查询方法:配置只读属性,让数据库知道这是一个查询操作,能够进行一定的优化 -->
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="count*" read-only="true"/>
			<!-- 增删改方法:配置事务传播行为,回滚异常 -->
			<!-- 
				propagation属性:
					REQUIRED:默认值,表示当前方法必须在事务中,如果当前线程没有开启事务,则自己开启新事务.如果有了,就使用当前事务-别人的事务可能被回滚
					REQUIRES_NEW:建议使用的值,表示不管当前线程上有没有事务,都要自己开启事务,在自己的事务中运行-不会受其它事务的影响
			 -->
			 <!-- 
			 	rollback-for属性:配置事务方法针对什么样的异常回滚
			 	默认:运行时异常回滚
			 	建议:编译时异常和运行时异常都回滚
			  -->
			<tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
</beans>
